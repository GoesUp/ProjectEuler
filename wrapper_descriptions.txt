001|Steps:
 1. Check the first 999 integers - if they are divisible by both 3 and 5, save them into 'multiples'.
 2. Return the sum of 'multiples'.||

002|Steps:
 1. Set three variables:
  1a. 'first'       - contains the first number of the sequence,
  1b. 'second'      - contains the second number of the sequence, and
  1c. 'vsota_sodih' - will contain the sum of all even terms (starts with 2, the value of 'second').
 2. The algorithm will change the content of 'first' and 'second' like this:
  2a. Store the value of 'second' into 'first'
  2b. Store the sum of 'second' and the previous value of 'first' into 'second.'
 3. If the number in the variable 'second' is even, add this number to 'vsota_sodih'.
 4. Repeat steps 3 and 4 until 'second' is larger than 4 million.
 5. Return 'vsota_sodih'.||

003|Steps:
 1. Set two variables:
  1a. 'factors' - will contain all the prime factors and
  1b. 'number'  - contains the initial number (600851475143).
 2. Go from 1 to 'number' with 'i'.
 3. If 'i' divides 'number':
  3a. Store 'i' in 'factors' and
  3b. Divide 'number' by 'i'.
 4. If 'i' doesn't divide 'number', increase it by 1 and go to step 3.
 5. Repeat steps 2-4 until 'number' equals 1.
 6. Return the maximal element of 'factors'.||

004|Steps:
 1. Set one variable:
  1a. 'biggest_palindrome' - will contain the largest discovered palindrome number - initial value is 0
 2. Make two for loops: 'i' goes from 1000 to 100 and 'j' goes from 'i' to 100.
 3. Save i * j into 'current_product'.
 4. If 'current_product' is smaller than 'biggest_palindrome', go to the next value of 'i'.
 5. If 'current_product' is a palindrome number, save it to 'biggest_palindrome' and go to the next value if 'i'.
 6. Repeat steps 3-5 for all values if i.
 7. Return 'biggest_palindrome'.||

005|Steps:
 1. Create a list of numbers from 11 to 20 and save it into 'numbers'.
 2. Replace the first two items from 'numbers' with their lowest common multiple.
 3. Repeat step 2 until there is only one number left in 'numbers'.
 4. Return the said number.||

006|Steps:
 1. Calculate the sum of the squares of the first one hundred natural numbers and save it into 'sum_of_the_squares'.
 2. Calculate the square of the sum of the first one hundred natural numbers and save it into 'square_of_the_sum'.
 3. Return the difference between 'square_of_the_sum' and 'sum_of_the_squares'.||

007|Steps:
 1. Set four variables:
  1a. 'prime_quantity' - here, we specify which prime number in a row we want to calculate.
  1b. 'sito'           - a list, filled with as many True values as we need to check to get at least 'prime_quantity'
                         of primes.
  1c. 'count'          - set to 0, will be increased by 1 every time we find a prime.
  1d. 'position'       - set to 2 (the first prime), will be increased every time we check a number for its primality.
 2. Check the item in 'sito' with the index specified in 'position'.
 3. If this item's value is True, set all of the items with indexes being multiples of 'position' to False. Also,
    increase 'count' by 1.
 4. Increase position by 1 regardless of the current index's primality.
 5. Repeat steps 2-4 as long as 'count' is smaller than 'prime_quantity'.
 6. Return the value of 'position' decreased by 1 (because we added 1 unnecessarily in step 4).||

065|Steps:
 1. Set one variable:
  1a. 'fraction_parts' - contains 2 as the first one in the series of denominators
 2. Generate 99 digits from the series 1, 2, 1, 1, 4, 1, 1, 6, 1, ... and add them to 'fraction_parts'
 3. Initiate the 'ulomek' variable, which will contain the result.
 4. Set the initial value of 'ulomek' as the popped last element from 'fraction_parts'.
 5. Set ulomek to the popped last element from 'fraction_parts' plus 1 / ('ulomek').
 6. Repeat step 5 until 'fraction_parts' runs out of elements.
 7. Return the sum of the digits of the numerator of 'ulomek'.||

124|Steps:
 1. Set three variables:
  1a. 'primes'        - generate all primes up to 100k and load them into this variable
  1b. 'prime_factors' - this will be used to save distinct prime factors for all number up to 100k (preloaded with the
                        value for 1)
  1c. 'radicals'      - this will be used to save radical values of all numbers up to 100k
 2. For each value from 'primes', add itself to 'prime_factors'.
 3. Make a for loop: 'j' goes from 4 to 100001:
  3a. If 'j' is in 'primes', which means we already added its value to 'prime_factors', we skip to the next 'j'.
  3b. Set 'counter' to 2 and 'factors' to an empty set.
  3c. If 'j' equals 1, go to step 3g.
  3d. If 'j' is already in 'prime_factors', merge its set from 'prime_factors' with 'factors' and go to step 3g.
  3e. If 'counter' divides 'j', add 'counter' to 'factors', otherwise increase 'counter' by 1.
  3f. Go to step 3c.
  3g. Add 'factors' to 'prime_factors' for the initial value of 'j'.
  3h. Repeat steps 3a-3g for all remaining values of 'j'.
 4. For all values 'o' in 'primes', add such tuples to 'radicals': (o, o).
 5. For all values 'k' in prime_factors:
  5a. If 'k' is in 'primes', we skip to the next value 'k', since we already added all primes numbers to the 'radicals'
      list.
  5b. Add a tuple to 'radicals': the first value is the product of all prime factors of 'k' from 'prime_factors' and the
      second value is 'k' itself.
 6. Sort 'radicals' by the first element in the tuple and return the second value in the 10000th tuple.||

187|Steps:
 1. Set two variables:
  1a. 'pra'   - generate all primes up to 50 million and load them into this variable
      EXPLANATION - We don't need to generate primes up to 100 million since numbers between 50 mil and 100 mil cannot
      possibly produce composite numbers below 100 million.
  1b. 'valid' - we will save valid composite numbers into this set
 2. Make two for loops: 'i' iterates over all items in 'pra' and 'j' does the same, but ignores all primes before 'k'.
  2a. Multiply the primes from 'pra' with indexes 'i' and 'j' and store this product into 'product'.
  2b. If 'product' is lower than the required limit of 1e8, store it into 'valid'.
  2c. If 'product' is higher than the said limit, skip to the next value of 'i'.
  2d. Repeat steps 2a-2c for all values of 'i'.
 3. Return the number of elements in 'valid'.||

206|Steps:
 1. Set two variables:
  1a. 'low'    - set this value to the lowest possible value we ought to check: the square root of 10203040506070809.
      EXPLANATION - We omit the last two digits because if the last digit is zero, the one before must be the same
      since this number is the square of a positive integer. In order to get the right result, we will multiply the
      final result by 10 when we find a matching number.
  1b. 'static' - set this to '123456789' in order to check numbers in step 2 whether they are valid or not.
 2. Run the following steps until a breaking event occurs:
  2a. If the string value of every second number of 'low' matches 'static', go to step 3.
  2b. Otherwise, increase 'low' by 2, since the first value of 'low' is odd and we cannot get 9 at the end of the square
      with an even number.
 3. Return the value of 'low', multiplied by 10.||